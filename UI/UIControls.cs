// <copyright file="UIControls.cs" company="Metlife">
//  Copyright (c) Metlife. All rights reserved.
// </copyright>
// <summary>UIControls.cs class stores all the Test User interface control values</summary>
// <auto-generated />
namespace INF.CodedUI.TestAutomation.UI
{
    using System;
    using Microsoft.VisualStudio.TestTools.UITesting.HtmlControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Utilities;

    /// <summary>
    /// Application User Interface Controls.
    /// </summary>
    public class UiControls
    {
        public const string HtmlInputButton = "HTMLINPUTBUTTON";
        public const string HtmlButton = "HTMLBUTTON";
        public const string HtmlRadioButton = "HTMLRADIOBUTTON";
        public const string HtmlHyperlink = "HTMLHYPERLINK";
        public const string HtmlComboBox = "HTMLCOMBOBOX";
        public const string HtmlComboBoxSelectDirect = "HTMLCOMBOBOXSELECTDIRECT";
        public const string HtmlCheckBox = "HTMLCHECKBOX";
        public const string HtmlEdit = "HTMLEDIT";
        public const string HtmlTable = "HTMLTABLE";
        public const string HtmlTextArea = "HTMLTEXTAREA";
        public const string HtmlControl = "HTMLCONTROL";
        public const string HtmlFrame = "HTMLFRAME";
        public const string HtmlList = "HTMLLIST";
        public const string HtmlDiv = "HTMLDIV";
        public const string HtmlLabel = "HTMLLABEL";
        public const string HtmlImage = "HTMLIMAGE";
        public const string HtmlSpan = "HTMLSPAN";
        public const string HtmlDocument = "HTMLDOCUMENT";
        public const string HtmlCustom = "HTMLCUSTOM";
        public const string HtmlSplitButton = "HTMLSPLITBUTTON";
        public const string HtmlCell = "HTMLCELL";

        public const string WinControl = "WINCONTROL";
        public const string WinMenuItem = "WINMENUITEM";
        public const string WinEdit = "WINEDIT";
        public const string WinTree = "WINTREE";
        public const string WinTreeItem = "WINTREEITEM";
        public const string WinButton = "WINBUTTON";
        public const string WinRadioButton = "WINRADIOBUTTON";
        public const string WinCheckBox = "WINCHECKBOX";
        public const string WinCheckBoxTreeItem = "WINCHECKBOXTREEITEM";
        public const string WinCalendar = "WINCALENDAR";
        public const string WinCell = "WINCELL";
        public const string WinClient = "WINCLIENT";
        public const string WinComboBox = "WINCOMBOBOX";
        public const string WinCustom = "WINCUSTOM";
        public const string WinDateTimePicker = "WINDATETIMEPICKER";
        public const string WinGroup = "WINGROUP";
        public const string WinHyperlink = "WINHYPERLINK";
        public const string WinList = "WINLIST";
        public const string WinListItem = "WINLISTITEM";
        public const string WinMenu = "WINMenu";
        public const string WinMenuBar = "WINMENUBAR";
        public const string WinPane = "WINPANE";
        public const string WinProgressBar = "WINPROGRESSBAR";
        public const string WinRow = "WINROW";
        public const string WinRowHeader = "WINROWHEADER";
        public const string WinScrollBar = "WINSCROLLBAR";
        public const string WinStatusBar = "WINSTATUSBAR";
        public const string WinTable = "WINTABLE";
        public const string WinTabList = "WINTABLIST";
        public const string WinTabPage = "WINTABPAGE";
        public const string WinText = "WINTEXT";
        public const string WinTitleBar = "WINTITLEBAR";
        public const string WinToolBar = "WINTOOLBAR";
        public const string WinToolTip = "WINTOOLTIP";
        public const string WinWindow = "WINWINDOW";
        public const string TypeWinapp = "WINDOW";
        public const string TypeBrowser = "BROWSER";
        public const string TypePopup = "POPUP";

        public const string ValueProperty = "value";

        private const string TechnologyNameWeb = "Web";
        private const string TechnologyNameWin = "MSAA";

        /// <summary>
        /// Error log collects runtime errors.
        /// </summary>
        /// <param name="uiControlType">User Interface Control Type.</param>
        /// <param name="uiTitle">User Interface Title.</param>
        /// <param name="uiType">User Interface Type.</param>
        /// <param name="searchProperty">User Interface search Property.</param>
        /// <param name="searchValue">User Interface search Value.</param>
        /// <param name="filterProperty">User Interface filter Property.</param>
        /// <param name="filterValue">User Interface filter Value.</param>
        public static object CreateControl(string uiControlType, string uiTitle, string uiType, string searchProperty, string searchValue, string filterProperty, string filterValue)
        {
            ////var title = string.Empty;
            
            object htmlControl;
            
            if (uiType == "Window")
            {
                if (uiTitle != null && uiType == "Window")
                {
                    uiTitle = Window.GetTitleFromPartOfTitle(uiTitle, uiType);
                }

                dynamic htmlControlWin;
                switch (uiControlType.ToUpper())
                {
                    case WinControl:
                        htmlControlWin = GetWinControl(uiTitle, uiType);
                        break;
                    case WinMenuItem:
                        htmlControlWin = GetWinMenuItem(uiTitle, uiType);
                        break;
                    case WinEdit:
                        htmlControlWin = GetWinEdit(uiTitle, uiType);
                        break;
                    case WinTree:
                        htmlControlWin = GetWinTree(uiTitle, uiType);
                        break;
                    case WinTreeItem:
                        htmlControlWin = GetWinTreeItem(uiTitle, uiType);
                        break;
                    case WinButton:
                        htmlControlWin = GetWinButton(uiTitle, uiType);
                        break;
                    case WinRadioButton:
                        htmlControlWin = GetWinRadioButton(uiTitle, uiType);
                        break;
                    case WinCheckBox:
                        htmlControlWin = GetWinCheckBox(uiTitle, uiType);
                        break;
                    case WinCheckBoxTreeItem:
                        htmlControlWin = GetWinCheckBoxTreeItem(uiTitle, uiType);
                        break;
                    case WinCalendar:
                        htmlControlWin = GetWinCalendar(uiTitle, uiType);
                        break;
                    case WinCell:
                        htmlControlWin = GetWinCell(uiTitle, uiType);
                        break;
                    case WinClient:
                        htmlControlWin = GetWinClient(uiTitle, uiType);
                        break;
                    case WinComboBox:
                        htmlControlWin = GetWinComboBox(uiTitle, uiType);
                        break;
                    case WinCustom:
                        htmlControlWin = GetWinCustom(uiTitle, uiType);
                        break;
                    case WinDateTimePicker:
                        htmlControlWin = GetWinDateTimePicker(uiTitle, uiType);
                        break;
                    case WinGroup:
                        htmlControlWin = GetWinGroup(uiTitle, uiType);
                        break;
                    case WinHyperlink:
                        htmlControlWin = GetWinHyperlink(uiTitle, uiType);
                        break;
                    case WinList:
                        htmlControlWin = GetWinList(uiTitle, uiType);
                        break;
                    case WinListItem:
                        htmlControlWin = GetWinListItem(uiTitle, uiType);
                        break;
                    case WinMenu:
                        htmlControlWin = GetWinMenu(uiTitle, uiType);
                        break;
                    case WinMenuBar:
                        htmlControlWin = GetWinMenuBar(uiTitle, uiType);
                        break;
                    case WinPane:
                        htmlControlWin = GetWinPane(uiTitle, uiType);
                        break;
                    case WinProgressBar:
                        htmlControlWin = GetWinProgressBar(uiTitle, uiType);
                        break;
                    case WinRow:
                        htmlControlWin = GetWinRow(uiTitle, uiType);
                        break;
                    case WinRowHeader:
                        htmlControlWin = GetWinRowHeader(uiTitle, uiType);
                        break;
                    case WinScrollBar:
                        htmlControlWin = GetWinScrollBar(uiTitle, uiType);
                        break;
                    case WinStatusBar:
                        htmlControlWin = GetWinStatusBar(uiTitle, uiType);
                        break;
                    case WinTable:
                        htmlControlWin = GetWinTable(uiTitle, uiType);
                        break;
                    case WinTabList:
                        htmlControlWin = GetWinTabList(uiTitle, uiType);
                        break;
                    case WinTabPage:
                        htmlControlWin = GetWinTabPage(uiTitle, uiType);
                        break;
                    case WinText:
                        htmlControlWin = GetWinText(uiTitle, uiType);
                        break;
                    case WinTitleBar:
                        htmlControlWin = GetWinTitleBar(uiTitle, uiType);
                        break;
                    case WinToolBar:
                        htmlControlWin = GetWinToolBar(uiTitle, uiType);
                        break;
                    case WinToolTip:
                        htmlControlWin = GetWinToolTip(uiTitle, uiType);
                        break;
                    default:
                        throw new Exception("UIControlType " + uiControlType + " is not supported");
                }

                htmlControlWin.WindowTitles.Add(uiTitle);
                if (!string.IsNullOrEmpty(searchProperty) && !string.IsNullOrEmpty(searchValue))
                {
                    htmlControlWin.SearchProperties.Add(searchProperty.ToLower(), searchValue);
                }

                if (!string.IsNullOrEmpty(filterProperty) && !string.IsNullOrEmpty(filterValue))
                {
                    htmlControlWin.FilterProperties.Add(filterProperty.ToLower(), filterValue);
                }

                Assert.IsTrue(
                    htmlControlWin.WaitForControlExist(Convert.ToInt32(General.WaitForControlToExistTimeOut)),
                    "UIControl with search property = " + searchProperty + " and search value = " + searchValue + " and filter property = " + filterProperty + " and filter value = " + filterValue + " doesn't  exist");

                htmlControl = htmlControlWin;
            }
            else
            {
                if (uiTitle != null && uiType != null)
                {
                    uiTitle = Browser.GetTitleFromPartOfTitle(uiTitle, uiType);
                }

                dynamic htmlControlBrowser;
                switch (uiControlType.ToUpper())
                {
                    case HtmlControl:
                        htmlControlBrowser = GetHtmlControl(uiTitle, uiType);
                        break;
                    case HtmlEdit:
                        htmlControlBrowser = GetHtmlEdit(uiTitle, uiType);
                        break;
                    case HtmlTable:
                        htmlControlBrowser = GetHtmlTable(uiTitle, uiType);
                        break;
                    case HtmlInputButton:
                        htmlControlBrowser = GetHtmlInputButton(uiTitle, uiType);
                        break;
                    case HtmlButton:
                        htmlControlBrowser = GetHtmlButton(uiTitle, uiType);
                        break;
                    case HtmlRadioButton:
                        htmlControlBrowser = GetHtmlRadioButton(uiTitle, uiType);
                        break;
                    case HtmlHyperlink:
                        htmlControlBrowser = GetHtmlHyperlink(uiTitle, uiType);
                        break;
                    case HtmlList:
                        htmlControlBrowser = GetHtmlList(uiTitle, uiType);
                        break;
                    case HtmlComboBox:
                    case HtmlComboBoxSelectDirect:
                        htmlControlBrowser = GetHtmlCombobox(uiTitle, uiType);
                        break;
                    case HtmlCheckBox:
                        htmlControlBrowser = GetHtmlCheckbox(uiTitle, uiType);
                        break;
                    case HtmlTextArea:
                        htmlControlBrowser = GetHtmlTextArea(uiTitle, uiType);
                        break;
                    case HtmlDiv:
                        htmlControlBrowser = GetHtmlDiv(uiTitle, uiType);
                        break;
                    case HtmlLabel:
                        htmlControlBrowser = GetHtmlLabel(uiTitle, uiType);
                        break;
                    case HtmlImage:
                        htmlControlBrowser = GetHtmlImage(uiTitle, uiType);
                        break;
                    case HtmlSpan:
                        htmlControlBrowser = GetHtmlSpan(uiTitle, uiType);
                        break;
                    case HtmlCustom:
                        htmlControlBrowser = GetHtmlCustom(uiTitle, uiType);
                        break;
                    case HtmlFrame:
                        htmlControlBrowser = GetHtmlFrame(uiTitle, uiType);
                        break;
                    case HtmlCell:
                        htmlControlBrowser = GetHtmlCell(uiTitle, uiType);
                        break;
                    default:
                        throw new Exception("UIControlType " + uiControlType + " is not supported");
                }

                if (!string.IsNullOrEmpty(searchProperty) && !string.IsNullOrEmpty(searchValue))
                {
                    htmlControlBrowser.SearchProperties.Add(searchProperty.ToLower(), searchValue);
                }

                if (!string.IsNullOrEmpty(filterProperty) && !string.IsNullOrEmpty(filterValue))
                {
                    htmlControlBrowser.FilterProperties.Add(filterProperty.ToLower(), filterValue);
                }

                htmlControlBrowser.WindowTitles.Add(uiTitle);

                Assert.IsTrue(
                    htmlControlBrowser.WaitForControlExist(Convert.ToInt32(General.WaitForControlToExistTimeOut)),
                    "UIControl with search property = " + searchProperty + " and search value = " + searchValue + " and filter property = " + filterProperty + " and filter value = " + filterValue + " doesn't  exist");

                htmlControl = htmlControlBrowser;
            }

            return htmlControl;
        }

        private static HtmlControl GetHtmlControl(string uiTitle, string uiType)
        {
            dynamic htmlControl = new HtmlControl(Browser.Locate(uiTitle, uiType));
            htmlControl.TechnologyName = TechnologyNameWeb;
            return htmlControl;
        }

        private static HtmlEdit GetHtmlEdit(string uiTitle, string uiType)
        {
            dynamic htmlControl = new HtmlEdit(Browser.Locate(uiTitle, uiType));
            htmlControl.TechnologyName = TechnologyNameWeb;
            return htmlControl;
        }

        private static HtmlInputButton GetHtmlInputButton(string uiTitle, string uiType)
        {
            dynamic htmlControl = new HtmlInputButton(Browser.Locate(uiTitle, uiType));
            htmlControl.TechnologyName = TechnologyNameWeb;
            return htmlControl;
        }

        private static HtmlButton GetHtmlButton(string uiTitle, string uiType)
        {
            dynamic htmlControl = new HtmlButton(Browser.Locate(uiTitle, uiType));
            htmlControl.TechnologyName = TechnologyNameWeb;
            return htmlControl;
        }

        private static HtmlRadioButton GetHtmlRadioButton(string uiTitle, string uiType)
        {
            dynamic htmlControl = new HtmlRadioButton(Browser.Locate(uiTitle, uiType));
            htmlControl.TechnologyName = TechnologyNameWeb;
            return htmlControl;
        }

        private static HtmlHyperlink GetHtmlHyperlink(string uiTitle, string uiType)
        {
            dynamic htmlControl = new HtmlHyperlink(Browser.Locate(uiTitle, uiType));
            htmlControl.TechnologyName = TechnologyNameWeb;
            return htmlControl;
        }

        private static HtmlList GetHtmlList(string uiTitle, string uiType)
        {
            dynamic htmlControl = new HtmlList(Browser.Locate(uiTitle, uiType));
            htmlControl.TechnologyName = TechnologyNameWeb;
            return htmlControl;
        }

        private static HtmlComboBox GetHtmlCombobox(string uiTitle, string uiType)
        {
            dynamic htmlControl = new HtmlComboBox(Browser.Locate(uiTitle, uiType));
            htmlControl.TechnologyName = TechnologyNameWeb;
            return htmlControl;
        }

        private static HtmlCheckBox GetHtmlCheckbox(string uiTitle, string uiType)
        {
            dynamic htmlControl = new HtmlCheckBox(Browser.Locate(uiTitle, uiType));
            htmlControl.TechnologyName = TechnologyNameWeb;
            return htmlControl;
        }

        private static HtmlTextArea GetHtmlTextArea(string uiTitle, string uiType)
        {
            dynamic htmlControl = new HtmlTextArea(Browser.Locate(uiTitle, uiType));
            htmlControl.TechnologyName = TechnologyNameWeb;
            return htmlControl;
        }

        private static HtmlDiv GetHtmlDiv(string uiTitle, string uiType)
        {
            dynamic htmlControl = new HtmlDiv(Browser.Locate(uiTitle, uiType));
            htmlControl.TechnologyName = TechnologyNameWeb;
            return htmlControl;
        }

        private static HtmlLabel GetHtmlLabel(string uiTitle, string uiType)
        {
            dynamic htmlControl = new HtmlLabel(Browser.Locate(uiTitle, uiType));
            htmlControl.TechnologyName = TechnologyNameWeb;
            return htmlControl;
        }

        private static HtmlImage GetHtmlImage(string uiTitle, string uiType)
        {
            dynamic htmlControl = new HtmlImage(Browser.Locate(uiTitle, uiType));
            htmlControl.TechnologyName = TechnologyNameWeb;
            return htmlControl;
        }

        private static HtmlSpan GetHtmlSpan(string uiTitle, string uiType)
        {
            dynamic htmlControl = new HtmlSpan(Browser.Locate(uiTitle, uiType));
            htmlControl.TechnologyName = TechnologyNameWeb;
            return htmlControl;
        }

        private static HtmlTable GetHtmlTable(string uiTitle, string uiType)
        {
            dynamic htmlControl = new HtmlTable(Browser.Locate(uiTitle, uiType));
            htmlControl.TechnologyName = TechnologyNameWeb;
            return htmlControl;
        }

        private static HtmlCustom GetHtmlCustom(string uiTitle, string uiType)
        {
            dynamic htmlControl = new HtmlCustom(Browser.Locate(uiTitle, uiType));
            htmlControl.TechnologyName = TechnologyNameWeb;
            return htmlControl;
        }

        private static HtmlFrame GetHtmlFrame(string uiTitle, string uiType)
        {
            dynamic htmlControl = new HtmlFrame(Browser.Locate(uiTitle, uiType));
            htmlControl.TechnologyName = TechnologyNameWeb;
            return htmlControl;
        }

        private static HtmlCell GetHtmlCell(string uiTitle, string uiType)
        {
            dynamic htmlControl = new HtmlCell(Browser.Locate(uiTitle, uiType));
            htmlControl.TechnologyName = TechnologyNameWeb;
            return htmlControl;
        }

        private static WinControl GetWinControl(string uiTitle, string uiType)
        {
            var htmlcontrol = new WinControl(Browser.Locate(uiTitle, uiType, false));
            var htmlControl = htmlcontrol;
            htmlControl.TechnologyName = TechnologyNameWin;
            return htmlControl;
        }

        private static WinMenuItem GetWinMenuItem(string uiTitle, string uiType)
        {
            var htmlcontrolWin = new WinMenuItem(Window.Locate(uiTitle, uiType,false));
            var htmlControlWin = htmlcontrolWin;
            htmlControlWin.TechnologyName = TechnologyNameWin;
            return htmlControlWin;
        }

        private static WinEdit GetWinEdit(string uiTitle, string uiType)
        {
            var htmlcontrolWin = new WinEdit(Window.Locate(uiTitle, uiType, false));
            var htmlControlWin = htmlcontrolWin;
            htmlControlWin.TechnologyName = TechnologyNameWin;
            return htmlControlWin;
        }

        private static WinTree GetWinTree(string uiTitle, string uiType)
        {
            var htmlcontrolWin = new WinTree(Window.Locate(uiTitle, uiType));
            var htmlControlWin = htmlcontrolWin;
            htmlControlWin.TechnologyName = TechnologyNameWin;
            return htmlControlWin;
        }

        private static WinTreeItem GetWinTreeItem(string uiTitle, string uiType)
        {
            var htmlcontrolWin = new WinTreeItem(Window.Locate(uiTitle, uiType));
            var htmlControlWin = htmlcontrolWin;
            htmlControlWin.TechnologyName = TechnologyNameWin;
            return htmlControlWin;
        }

        private static WinButton GetWinButton(string uiTitle, string uiType)
        {
            var htmlcontrolWin = new WinButton(Window.Locate(uiTitle, uiType,false));
            var htmlControlWin = htmlcontrolWin;
            htmlControlWin.TechnologyName = TechnologyNameWin;
            return htmlControlWin;
        }

        private static WinRadioButton GetWinRadioButton(string uiTitle, string uiType)
        {
            var htmlcontrolWin = new WinRadioButton(Window.Locate(uiTitle, uiType,false));
            var htmlControlWin = htmlcontrolWin;
            htmlControlWin.TechnologyName = TechnologyNameWin;
            return htmlControlWin;
        }

        private static WinCheckBox GetWinCheckBox(string uiTitle, string uiType)
        {
            var htmlcontrolWin = new WinCheckBox(Window.Locate(uiTitle, uiType,false));
            var htmlControlWin = htmlcontrolWin;
            htmlControlWin.TechnologyName = TechnologyNameWin;
            return htmlControlWin;
        }

        private static WinCheckBoxTreeItem GetWinCheckBoxTreeItem(string uiTitle, string uiType)
        {
            var htmlcontrolWin = new WinCheckBoxTreeItem(Window.Locate(uiTitle, uiType));
            var htmlControlWin = htmlcontrolWin;
            htmlControlWin.TechnologyName = TechnologyNameWin;
            return htmlControlWin;
        }

        private static WinCalendar GetWinCalendar(string uiTitle, string uiType)
        {
            var htmlcontrolWin = new WinCalendar(Window.Locate(uiTitle, uiType));
            var htmlControlWin = htmlcontrolWin;
            htmlControlWin.TechnologyName = TechnologyNameWin;
            return htmlControlWin;
        }

        private static WinCell GetWinCell(string uiTitle, string uiType)
        {
            var htmlcontrolWin = new WinCell(Window.Locate(uiTitle, uiType));
            var htmlControlWin = htmlcontrolWin;
            htmlControlWin.TechnologyName = TechnologyNameWin;
            return htmlControlWin;
        }

        private static WinClient GetWinClient(string uiTitle, string uiType)
        {
            var htmlcontrolWin = new WinClient(Window.Locate(uiTitle, uiType));
            var htmlControlWin = htmlcontrolWin;
            htmlControlWin.TechnologyName = TechnologyNameWin;
            return htmlControlWin;
        }

        private static WinComboBox GetWinComboBox(string uiTitle, string uiType)
        {
            var htmlcontrolWin = new WinComboBox(Window.Locate(uiTitle, uiType));
            var htmlControlWin = htmlcontrolWin;
            htmlControlWin.TechnologyName = TechnologyNameWin;
            return htmlControlWin;
        }

        private static WinCustom GetWinCustom(string uiTitle, string uiType)
        {
            var htmlcontrolWin = new WinCustom(Window.Locate(uiTitle, uiType));
            var htmlControlWin = htmlcontrolWin;
            htmlControlWin.TechnologyName = TechnologyNameWin;
            return htmlControlWin;
        }

        private static WinDateTimePicker GetWinDateTimePicker(string uiTitle, string uiType)
        {
            var htmlcontrolWin = new WinDateTimePicker(Window.Locate(uiTitle, uiType));
            var htmlControlWin = htmlcontrolWin;
            htmlControlWin.TechnologyName = TechnologyNameWin;
            return htmlControlWin;
        }

        private static WinGroup GetWinGroup(string uiTitle, string uiType)
        {
            var htmlcontrolWin = new WinGroup(Window.Locate(uiTitle, uiType,false));
            var htmlControlWin = htmlcontrolWin;
            htmlControlWin.TechnologyName = TechnologyNameWin;
            return htmlControlWin;
        }

        private static WinHyperlink GetWinHyperlink(string uiTitle, string uiType)
        {
            var htmlcontrolWin = new WinHyperlink(Window.Locate(uiTitle, uiType));
            var htmlControlWin = htmlcontrolWin;
            htmlControlWin.TechnologyName = TechnologyNameWin;
            return htmlControlWin;
        }

        private static WinList GetWinList(string uiTitle, string uiType)
        {
            var htmlcontrolWin = new WinList(Window.Locate(uiTitle, uiType,false));
            var htmlControlWin = htmlcontrolWin;
            htmlControlWin.TechnologyName = TechnologyNameWin;
            return htmlControlWin;
        }

        private static WinListItem GetWinListItem(string uiTitle, string uiType)
        {
            var htmlcontrolWin = new WinListItem(Window.Locate(uiTitle, uiType,false));
            var htmlControlWin = htmlcontrolWin;
            htmlControlWin.TechnologyName = TechnologyNameWin;
            return htmlControlWin;
        }

        private static WinMenu GetWinMenu(string uiTitle, string uiType)
        {
            var htmlcontrolWin = new WinMenu(Window.Locate(uiTitle, uiType,false));
            var htmlControlWin = htmlcontrolWin;
            htmlControlWin.TechnologyName = TechnologyNameWin;
            return htmlControlWin;
        }

        private static WinMenuBar GetWinMenuBar(string uiTitle, string uiType)
        {
            var htmlcontrolWin = new WinMenuBar(Window.Locate(uiTitle, uiType));
            var htmlControlWin = htmlcontrolWin;
            htmlControlWin.TechnologyName = TechnologyNameWin;
            return htmlControlWin;
        }

        private static WinPane GetWinPane(string uiTitle, string uiType)
        {
            var htmlcontrolWin = new WinPane(Window.Locate(uiTitle, uiType));
            var htmlControlWin = htmlcontrolWin;
            htmlControlWin.TechnologyName = TechnologyNameWin;
            return htmlControlWin;
        }

        private static WinProgressBar GetWinProgressBar(string uiTitle, string uiType)
        {
            var htmlcontrolWin = new WinProgressBar(Window.Locate(uiTitle, uiType));
            var htmlControlWin = htmlcontrolWin;
            htmlControlWin.TechnologyName = TechnologyNameWin;
            return htmlControlWin;
        }

        private static WinRow GetWinRow(string uiTitle, string uiType)
        {
            var htmlcontrolWin = new WinRow(Window.Locate(uiTitle, uiType));
            var htmlControlWin = htmlcontrolWin;
            htmlControlWin.TechnologyName = TechnologyNameWin;
            return htmlControlWin;
        }

        private static WinRowHeader GetWinRowHeader(string uiTitle, string uiType)
        {
            var htmlcontrolWin = new WinRowHeader(Window.Locate(uiTitle, uiType));
            var htmlControlWin = htmlcontrolWin;
            htmlControlWin.TechnologyName = TechnologyNameWin;
            return htmlControlWin;
        }

        private static WinScrollBar GetWinScrollBar(string uiTitle, string uiType)
        {
            var htmlcontrolWin = new WinScrollBar(Window.Locate(uiTitle, uiType));
            var htmlControlWin = htmlcontrolWin;
            htmlControlWin.TechnologyName = TechnologyNameWin;
            return htmlControlWin;
        }

        private static WinStatusBar GetWinStatusBar(string uiTitle, string uiType)
        {
            var htmlcontrolWin = new WinStatusBar(Window.Locate(uiTitle, uiType));
            var htmlControlWin = htmlcontrolWin;
            htmlControlWin.TechnologyName = TechnologyNameWin;
            return htmlControlWin;
        }

        private static WinTable GetWinTable(string uiTitle, string uiType)
        {
            var htmlcontrolWin = new WinTable(Window.Locate(uiTitle, uiType));
            var htmlControlWin = htmlcontrolWin;
            htmlControlWin.TechnologyName = TechnologyNameWin;
            return htmlControlWin;
        }

        private static WinTabList GetWinTabList(string uiTitle, string uiType)
        {
            var htmlcontrolWin = new WinTabList(Window.Locate(uiTitle, uiType));
            var htmlControlWin = htmlcontrolWin;
            htmlControlWin.TechnologyName = TechnologyNameWin;
            return htmlControlWin;
        }

        private static WinTabPage GetWinTabPage(string uiTitle, string uiType)
        {
            var htmlcontrolWin = new WinTabPage(Window.Locate(uiTitle, uiType));
            var htmlControlWin = htmlcontrolWin;
            htmlControlWin.TechnologyName = TechnologyNameWin;
            return htmlControlWin;
        }

        private static WinText GetWinText(string uiTitle, string uiType)
        {
            var htmlcontrolWin = new WinText(Window.Locate(uiTitle, uiType));
            var htmlControlWin = htmlcontrolWin;
            htmlControlWin.TechnologyName = TechnologyNameWin;
            return htmlControlWin;
        }

        private static WinTitleBar GetWinTitleBar(string uiTitle, string uiType)
        {
            var htmlcontrolWin = new WinTitleBar(Window.Locate(uiTitle, uiType));
            var htmlControlWin = htmlcontrolWin;
            htmlControlWin.TechnologyName = TechnologyNameWin;
            return htmlControlWin;
        }

        private static WinToolBar GetWinToolBar(string uiTitle, string uiType)
        {
            var htmlcontrolWin = new WinToolBar(Window.Locate(uiTitle, uiType));
            var htmlControlWin = htmlcontrolWin;
            htmlControlWin.TechnologyName = TechnologyNameWin;
            return htmlControlWin;
        }

        private static WinToolTip GetWinToolTip(string uiTitle, string uiType)
        {
            var htmlcontrolWin = new WinToolTip(Window.Locate(uiTitle, uiType));
            var htmlControlWin = htmlcontrolWin;
            htmlControlWin.TechnologyName = TechnologyNameWin;
            return htmlControlWin;
        }

        private static WinWindow GetWinWindow(string uiTitle, string uiType)
        {
            var htmlcontrolWin = new WinWindow(Window.Locate(uiTitle, uiType,false));
            var htmlControlWin = htmlcontrolWin;
            htmlControlWin.TechnologyName = TechnologyNameWin;
            return htmlControlWin;
        }
    }
}