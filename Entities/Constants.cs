// <copyright file="Constants.cs" company="Metlife">
//  Copyright (c) Metlife. All rights reserved.
// </copyright>
// <summary>Constants.cs class stores constants values across framework.</summary>
// <auto-generated />
namespace INF.CodedUI.TestAutomation.Entities
{
    /// <summary>
    /// Constants referred across framework.
    /// </summary>
    public static class Constants
    {
        /// <summary>
        /// Double Back slash.
        /// </summary>
        /// <value>Value as Double Back slash.</value>
        public const string DoubleBackslash = "\\";

        /// <summary>
        /// String constant.
        /// </summary>
        /// <value>Value as String.</value>
        public const string String = "STRING";

        /// <summary>
        /// Integer constant.
        /// </summary>
        /// <value>Value as Integer.</value>
        public const string Integer = "INTEGER";

        /// <summary>
        /// Test Iterations.
        /// </summary>
        /// <value>Value as Test Iterations.</value>
        public const string TestIterations = "TestIterations";

        /// <summary>
        /// Test Report.
        /// </summary>
        /// <value>Value as Test Report.</value>
        public const string TestReport = "TestReport";

        /// <summary>
        /// Test result Pass.
        /// </summary>
        /// <value>Value as Pass.</value>
        public const string Pass = "Pass";

        /// <summary>
        /// Test result Fail.
        /// </summary>
        /// <value>Value as Fail.</value>
        public const string Fail = "Fail";

        /// <summary>
        /// Constant Zero.
        /// </summary>
        /// <value>Value as Zero.</value>
        public const int Zero = 0;

        /// <summary>
        /// Image file extension.
        /// </summary>
        /// <value>Value as Jpg.</value>
        public const string Jpg = ".jpg";

        /// <summary>
        /// Hyper link of failed tests screenshots.
        /// </summary>
        /// <value>Hyper link.</value>
        public const string Hyperlink = @"=HYPERLINK(""";

        /// <summary>
        /// Underscore constant.
        /// </summary>
        /// <value>Value as Underscore.</value>
        public const string Underscore = "_";

        /// <summary>
        /// Space as Constant.
        /// </summary>
        /// <value>Value as Space.</value>
        public const string Space = " ";

        /// <summary>
        /// Constant Full Stop.
        /// </summary>
        /// <value>Value as Full Stop.</value>
        public const string FullStop = ".";

        /// <summary>
        /// Constant comma.
        /// </summary>
        /// <value>Value as comma.</value>
        public const string Comma = ",";

        /// <summary>
        /// Constant Hyphen.
        /// </summary>
        /// <value>Value as Hyphen.</value>
        public const string Hyphen = "-";

        /// <summary>
        /// Constant Percentage.
        /// </summary>
        /// <value>Value as Percentage.</value>
        public const string Percentage = "%";

        /// <summary>
        /// Constant *.
        /// </summary>
        /// <value>Value as *.</value>
        public const string Asteric = "*";

        /// <summary>
        /// Constant Equal.
        /// </summary>
        /// <value>Value as Equal.</value>
        public const string Equal = "=";

        /// <summary>
        /// Double Back slash.
        /// </summary>
        /// <value>Value asDouble Back slash.</value>
        public const string Colon = ":";

        /// <summary>
        /// Constant excel extension.
        /// </summary>
        /// <value>Value as excel extension.</value>
        public const string Xlxs = ".xlsx";

        /// <summary>
        /// Constant Not Available.
        /// </summary>
        /// <value>Value as Not Available.</value>
        public const string Na = "NA";

        /// <summary>
        /// Constant Tab.
        /// </summary>
        /// <value>Value as Tab.</value>
        public const string Tab = "\t";

        /// <summary>
        /// Constant Text file extension.
        /// </summary>
        /// <value>Value as text file extension.</value>
        public const string Txt = ".txt";

        /// <summary>
        /// Event Log.
        /// </summary>
        /// <value>Value as Event Log.</value>
        public const string EventLog = "EventLog";

        /// <summary>
        /// Error Log.
        /// </summary>
        /// <value>Value as Error Log.</value>
        public const string ErrorLog = "ErrorLog";

        /// <summary>
        /// Constant Logs.
        /// </summary>
        /// <value>Value as Logs.</value>
        public const string Logs = "Logs";

        /// <summary>
        /// Constant for data base connectivity.
        /// </summary>
        /// <value>Value as data base connectivity.</value>
        public const string Oledb = "oledb";

        /// <summary>
        /// Semi Colon Character.
        /// </summary>
        /// <value>Value as ;.</value>
        public const char SemiColonChar = ';';

        /// <summary>
        /// Hyphen Character.
        /// </summary>
        /// <value>Value as -.</value>
        public const char HyphenChar = '-';

        /// <summary>
        /// Colon Character.
        /// </summary>
        /// <value>Value as ;.</value>
        public const char ColonChar = ';';

        /// <summary>
        /// Forward Slash Character.
        /// </summary>
        /// <value>Value as ;.</value>
        public const char ForwardSlashChar = ';';

        /// <summary>
        /// Settings for Application.
        /// </summary>
        public static class AppSetting
        {
            /// <summary>
            /// Root File Path.
            /// </summary>
            /// <value>Value as Root File Path.</value>
            public const string RootFilePath = "RootFilePath";

            /// <summary>
            /// Log File Path.
            /// </summary>
            /// <value>Value as Log File Path.</value>
            public const string LogFilePath = "LogFilePath";

            /// <summary>
            /// File Name Prefix.
            /// </summary>
            /// <value>Value as File Name Prefix.</value>
            public const string FileNamePrefix = "TestReport_FileNamePrefix";

            /// <summary>
            /// Exist Time Out.
            /// </summary>
            /// <value>Value as Exist Time Out.</value>
            public const string ExistTimeOut = "WaitForControlToExistTimeOut";

            /// <summary>
            /// Browser Type.
            /// </summary>
            /// <value>Value as Browser Type.</value>
            public const string BrowserType = "BrowserType";

            /// <summary>
            /// User interface Control File.
            /// </summary>
            /// <value>Value as User interface Control File.</value>
            public const string UiControlFile = "UIControlFile";

            /// <summary>
            /// Verification File.
            /// </summary>
            /// <value>Value as Verification File.</value>
            public const string VerificationFile = "VerificationFile";

            /// <summary>
            /// Test Configuration File.
            /// </summary>
            /// <value>Value as Test Configuration File.</value>
            public const string TestConfigurationFile = "TestConfigurationFile";

            /// <summary>
            /// Test Case Folder Name.
            /// </summary>
            /// <value>Value as Test Case Folder Name.</value>
            public const string TestCaseFolderName = "TestCaseFolderName";


            /// <summary>
            /// DeploymentItem & OLEDB Connection String details
            /// </summary>
            public const string DeploymentItem = ".\\TestIterations\\TestIterations.xlsx";
            public const string TestIterationSheet = "TestIterations$";
            public const string Oledb = "System.Data.OleDb";
            public const string ConnectionString = @"Provider=Microsoft.ACE.OLEDB.12.0;Data Source=TestIterations.xlsx;Extended Properties='Excel 12.0 Xml;HDR=YES;IMEX=1'";
            
            
        }

        /// <summary>
        /// Excel work sheet for test iteration.
        /// </summary>
        public static class WorkSheets
        {
            /// <summary>
            /// Excel work sheet for test iteration.
            /// </summary>
            /// <value>Value as Excel work sheet for test iteration.</value>
            public const string TestIterationsWrok = "TestIterations";
        }

        /// <summary>
        /// Logical operators.
        /// </summary>
        public static class Operator
        {
            /// <summary>
            /// Logical operators.
            /// </summary>
            /// <value>Value as =.</value>
            public const string EQuals = "EQUALS";

            /// <summary>
            /// Logical operators.
            /// </summary>
            /// <value>Value as Contains.</value>
            public const string Contains = "CONTAINS";

            /// <summary>
            /// Logical operators.
            /// </summary>
            /// <value>Value as !=.</value>
            public const string NotEquals = "NOTEQUALS";

            /// <summary>
            /// Logical operators.
            /// </summary>
            /// <value>Value as Not Contains.</value>
            public const string NotContains = "NOTCONTAINS";
        }

        /// <summary>
        /// Class name.
        /// </summary>
        public static class ClassName
        {
            /// <summary>
            /// Class name.
            /// </summary>
            /// <value>Test cases class file.</value>
            public const string TestCases = "TestCases.cs";

            /// <summary>
            /// Class name.
            /// </summary>
            /// <value>Value as Test Configurations class file.</value>
            public const string TestConfigurations = "TestConfigurations.cs";

            /// <summary>
            /// Class name.
            /// </summary>
            /// <value>Value as Program class file.</value>
            public const string Program = "Program.cs";

            /// <summary>
            /// Class name.
            /// </summary>
            /// <value>Value as Base Test Class file.</value>
            public const string BaseTestClass = "BaseTestClass.cs";

            /// <summary>
            /// Class name.
            /// </summary>
            /// <value>Value as Test Iterations Class File.</value>
            public const string TestIterationsClass = "TestIterations.cs";

            /// <summary>
            /// Class name.
            /// </summary>
            /// <value>Value as User Interface Actions Class File.</value>
            public const string UiActionsClass = "UIActions.cs";

            /// <summary>
            /// Class name.
            /// </summary>
            /// <value>Value as User Interface Controls Class File.</value>
            public const string UiControlsClass = "UIControls.cs";

            /// <summary>
            /// Class name.
            /// </summary>
            /// <value>Value as Browser class file.</value>
            public const string Browser = "Browser.cs";

            /// <summary>
            /// Class name.
            /// </summary>
            /// <value>Value as Data class file.</value>
            public const string Data = "Data.cs";

            /// <summary>
            /// Class name.
            /// </summary>
            /// <value>Value as data base class file.</value>
            public const string Db = "DB.cs";

            /// <summary>
            /// Class name.
            /// </summary>
            /// <value>Value as General class file.</value>
            public const string General = "General.cs";

            /// <summary>
            /// Class name.
            /// </summary>
            /// <value>Value as Reporting class file.</value>
            public const string Reporting = "Reporting.cs";

            /// <summary>
            /// Class name.
            /// </summary>
            /// <value>Value as Result class file.</value>
            public const string Result = "Result.cs";

            /// <summary>
            /// Class name.
            /// </summary>
            /// <value>Value as Window class file.</value>
            public const string Window = "Window.cs";

            /// <summary>
            /// Class name.
            /// </summary>
            /// <value>Value as Verifications.</value>
            public const string Verifications = "Verifications.cs";
        }

        /// <summary>
        /// Messages for exceptions and errors.
        /// </summary>
        public static class Messages
        {
            /// <summary>
            /// Messages for exceptions and errors.
            /// </summary>
            /// <value>Value as Not Supported.</value>
            public const string NotSupported = "Action {0} is not supported";

            /// <summary>
            /// Messages for exceptions and errors.
            /// </summary>
            /// <value>Value as Test Case Failed Error.</value>
            public const string TestCaseFailedError = "Test case Failed. For more information read the test report: {0}";

            /// <summary>
            /// Messages for exceptions and errors.
            /// </summary>
            /// <value>Value as Report Sheet Error.</value>
            public const string ReportSheetError = "Couldn't create sheet in test report file. Error message: {0}";

            /// <summary>
            /// Messages for exceptions and errors.
            /// </summary>
            /// <value>Value as Report Insert Error.</value>
            public const string ReportInsertError = " Couldn't insert test step result in test report file. Error message: {0}";

            /// <summary>
            /// Messages for exceptions and errors.
            /// </summary>
            /// <value>Value as Test Report Error.</value>
            public const string TestReportError = "Couldn't create test report file. Error message: {0}";

            /// <summary>
            /// Messages for exceptions and errors.
            /// </summary>
            /// <value>Value as Test Initialization Error.</value>
            public const string TestInitializationError = "Couldn't initiliaze test case and test data. Error message: {0}";

            /// <summary>
            /// Messages for exceptions and errors.
            /// </summary>
            /// <value>Value as Due To Exception.</value>
            public const string DueToException = "Due to exception - {0}";

            /// <summary>
            /// Messages for exceptions and errors.
            /// </summary>
            /// <value>Value as Control Error.</value>
            public const string UiControlError = "Test data is needed for UIControl of type {0} in test step {1}.";

            /// <summary>
            /// Messages for exceptions and errors.
            /// </summary>
            /// <value>Value as Verification Error.</value>
            public const string VerificationError = "Header value {0} couldn't be found in sheet index 1 in Excel file Verifications.xlsx.";

            /// <summary>
            /// Messages for exceptions and errors.
            /// </summary>
            /// <value>Value as Test Configuration Error.</value>
            public const string TestConfigurationError = "Header value {0} couldn't be found in sheet index 1 in Excel file TestConfigurations.xlsx.";

            /// <summary>
            /// Messages for exceptions and errors.
            /// </summary>
            /// <value>Value as Test Case Error.</value>
            public const string TestCaseError =
                "Header value {0} couldn't be found in sheet index 1 in Excel file {1} TestCases\\{2}";

            /// <summary>
            /// Messages for exceptions and errors.
            /// </summary>
            /// <value>Value as Work Sheet Not Exist.</value>
            public const string WorkSheetNotExist = "Worksheet with name {0} couldn't be found in test report file.";

            /// <summary>
            /// Messages for exceptions and errors.
            /// </summary>
            /// <value>Value as Test Case Name Limit.</value>
            public const string TestCaseNameLimit = "Test case name is only allowed to be a maximum of 31 characters.";

            /// <summary>
            /// Messages for exceptions and errors.
            /// </summary>
            /// <value>Value as Report Already Exist.</value>
            public const string ReportAlreadyExist =
                "Excel report file {0} already has a worksheet with test case name {1}. It's only allowed to add a test case once in file TestIterations.xlsx.";

            /// <summary>
            /// Messages for exceptions and errors.
            /// </summary>
            /// <value>Value as Error Log Messages.</value>
            public const string ErrorLogMessages = "Error in ErrorLog method";

            /// <summary>
            /// Messages for exceptions and errors.
            /// </summary>
            /// <value>Value as Successful Completion.</value>
            public const string SuccessfullCompletion = "Successfull completion of {0}";

            /// <summary>
            /// Messages for exceptions and errors.
            /// </summary>
            /// <value>Value as Release Object.</value>
            public const string ReleaseObject = "Releasing object doesn't work. Error message: {0}";

            /// <summary>
            /// Messages for exceptions and errors.
            /// </summary>
            /// <value>Value as Control Sheet Error.</value>
            public const string UiControlSheetError =
                "Header value {0} couldn't be found in sheet index 1 in Excel file UIControls.xlsx.";
        }

        public static class Queries
        {
            public const string InsertSummary =
                "Insert into [TestIterations$] (F1,F2,F3,F4,F5,F6) values (@applicationParam,@TestCaseIDParam,@descriptionSummaryParam,@resultSummaryParam,@ExecutionDurationParam,@ExecutionDocumentReference)";
        }

        public static class StyleNames
        {
            public const string StyleHeader = "styleHeader";
            public const string StyleResultPassed = "styleResultPassed";
            public const string StyleResultFailed = "styleResultFailed";
        }

        public static class Browsers
        {
            public const string IeCaps = "IE";
            public const string FirefoxCaps = "FIREFOX";
            public const string ChromeCaps = "CHROME";
            public const string Iexplore = "iexplore";
            public const string Firefox = "firefox";
            public const string Chrome = "chrome";
        }

        public static class TestStepAction
        {
            public const string CloseBrowsers = "CLOSEBROWSERS";
            public const string ClearBrowserCookies = "CLEARBROWSERCOOKIES";
            public const string ClearBrowserCashe = "CLEARBROWSERCASHE";
            public const string LaunchBrowser = "LAUNCHBROWSER";
            public const string LaunchWindow = "LAUNCHWINDOW";
            public const string EditUiControl = "EDITUICONTROL";
            public const string Verify = "VERIFY";
            public const string WaitForUi = "WAITFORUI";
            public const string SendKeys = "SENDKEYS";
            public const string SaveUiControlValue = "SAVEUICONTROLVALUE";
        }

        public static class TestCase
        {
            public const string Application = "Application";
            public const string Name = "TestCase_Name";
            public const string Description = "TestCase_Description";
            public const string FileName = "TestCase_FileName";
        }

        public static class TestResultSummary
        {
            public const string ApplicationParam = "@applicationParam";
            public const string TestCaseIdParam = "@TestCaseIDParam";
            public const string DescriptionSummaryParam = "@descriptionSummaryParam";
            public const string ExecutionDurationParam = "@ExecutionDurationParam";
            public const string ResultSummaryParam = "@resultSummaryParam";
            public const string ExecutionDocumentReference = "@ExecutionDocumentReference";
        }

        public static class Verification
        {
            public const string VerificationId = "VERIFICATIONID";
            public const string VerificationType = "VERIFICATIONTYPE";
            public const string OperatorVerification = "OPERATOR";
            public const string UiControlProperty = "UICONTROLPROPERTY";
            public const string DatabaseQuery = "DATABASEQUERY";
            public const string DatabaseServer = "DATABASESERVER";
            public const string DatabaseName = "DATABASENAME";
        }

        public static class UiControls
        {
            public const string UiControlId = "UICONTROLID";
            public const string UiTitle = "UITITLE";
            public const string UiType = "UITYPE";
            public const string UiControlType = "UICONTROLTYPE";
            public const string UiControlSearchProperty = "UICONTROLSEARCHPROPERTY";
            public const string UiControlSearchValue = "UICONTROLSEARCHVALUE";
            public const string UiControlFilterProperty = "UICONTROLFILTERPROPERTY";
            public const string UiControlFilterValue = "UICONTROLFILTERVALUE";
            public const string ScreenPage = "SCREEN PAGE";
        }

        public static class TestConfiguration
        {
            public const string SNo = "S_NO";
            public const string Datatype = "DATATYPE";
            public const string VariableName = "VARIABLE_NAME";
            public const string TestData = "TEST_DATA";
        }

        public static class TestStep
        {
            public const string TestStepNumber = "TestStepNumber";
            public const string Action = "Action";
            public const string UiControlId = "UIControlId";
            public const string VerificationId = "VerificationId";
            public const string TestData = "TestData";
            public const string Remarks = "Remarks";
        }

        public static class TestResult
        {
            public const string Iteration = "Iteration";
            public const string StepNumber = "Step number";
            public const string Description = "Description";
            public const string Result = "Result";
            public const string Comment = "Comment";
            public const string Remarks = "Remarks";
        }

        public static class TestIteration
        {
            public const string StartDateTime = "Start Date/Time";
            public const string EndDateTime = "End Date/Time";
            public const string Duration = "Duration";
            public const string Application = "Application";
            public const string TestCaseName = "Test case name";
            public const string TestCaseDescription = "Test case description";
            public const string Result = "Result";
            public const string DocumentReference = "DocumentReference";
            public const string Description = "Description";
        }

        public static class UiActions
        {
            public const string LeftClick = "LEFTCLICK";
            public const string RightClick = "RIGHTCLICK";
            public const string MouseHover = "MOUSEHOVER";
            public const string EnterBracket = "{ENTER}";
            public const string SpaceBracket = "{SPACE}";
            public const string TabBracket = "{TAB}";
            public const string DownBracket = "{DOWN}";
            public const string BrowerExist = "BROWSEREXIST";
            public const string BrowerNotExists = "BROWSERNOTEXIST";
            public const string UiControlExist = "UICONTROLEXIST";
            public const string UiControlProperty = "UICONTROLPROPERTY";
            public const string DataBaseValue = "DATABASEVALUE";
            public const string Alt = "ALT+";
            public const string Shift = "SHIFT+";
            public const string Control = "CONTROL+";
        }
    }
}